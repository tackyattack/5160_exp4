C51 COMPILER V6.02  FILE_SYSTEM                                                            11/08/2019 17:19:47 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE FILE_SYSTEM
OBJECT MODULE PLACED IN .\file_system.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\source\file_system.c DEBUG OBJECTEXTEND PRINT(.\file_system.lst) OBJECT(
                    -.\file_system.obj) 

stmt level    source

   1          #include <stdio.h>
   2          #include "main.h"
   3          #include "sector_reader.h"
   4          #include "Directory_Functions_struct.h"
   5          #include "UART.h"
   6          #include "SPI.h"
   7          #include "print_bytes.h"
   8          #include "file_system.h"
   9          
  10          // Private constants (outside doesn't need to see these)
  11          #define MBR_BPB_sec_offset              (0x01C6)
  12          #define BPB_BytesPerSector_offset       (0x000B)
  13          #define BPB_SectorsPerCluster_offset    (0x000D)
  14          #define BPB_RsvdSectorCount_offset      (0x000E)
  15          #define BPB_NumberFATs_offset           (0x0010)
  16          #define BPB_RootEntryCount_offset       (0x0011)
  17          #define BPB_TotSec16_offset             (0x0013)
  18          #define BPB_FATSz16_offset              (0x0016)
  19          #define BPB_FATSz32_offset              (0x0024)
  20          #define BPB_TotSec32_offset             (0x0020)
  21          #define BPB_RootClus_offset             (0x002C)
  22          
  23          
  24          uint8_t mount_drive(uint8_t xdata *xram_data_array)
  25          {
  26   1        uint8_t temp8, NumFAT;
  27   1        uint16_t temp16, RootEntCnt, RsvdSecCnt, FATSz16;
  28   1        uint32_t ClusterCount, FATSz, TotSec, DataSec, MBR_RelSec, FATSz32, RootClus;
  29   1        uint8_t *data_array;
  30   1        FS_values_t *drive_values;
  31   1        data_array = xram_data_array; // cast xdata to uint8_t since all other functions don't use xdata
  32   1      
  33   1        drive_values = Export_Drive_values();
  34   1      
  35   1      
  36   1        // Find the BIOS parameter block (BPB)
  37   1        printf("Finding BIOS parameter block\n");
  38   1        Read_Sector(0, 512, data_array);
  39   1        temp8 = read8(0, data_array); // check first byte
  40   1        MBR_RelSec = 0;
  41   1        if((temp8!=0xEB) && (temp8!=0xE9))
  42   1        {
  43   2          // likely MBR
  44   2          // If we're in the MBR, then get the offset for the BPB
  45   2          MBR_RelSec = read32(MBR_BPB_sec_offset, data_array);
  46   2          // now read the start of BPB
  47   2          Read_Sector(MBR_RelSec, 512, data_array);
  48   2          temp8 = read8(0, data_array);
  49   2        }
  50   1      
  51   1        // now check if we've made it into the BPB by checking for the jump instruction
  52   1        if((temp8!=0xEB) && (temp8!=0xE9))
  53   1        {
  54   2          printf("error: could not locate BPB\n");
C51 COMPILER V6.02  FILE_SYSTEM                                                            11/08/2019 17:19:47 PAGE 2   

  55   2          return MOUNT_FAIL;
  56   2        }
  57   1      
  58   1        // ------- Read in BIOS parameter block -------
  59   1        drive_values->BytesPerSec = read16(BPB_BytesPerSector_offset, data_array);
  60   1      
  61   1        // set shift value (used by print directory function)
  62   1        drive_values->BytesPerSecShift = 0;
  63   1      
  64   1        temp16 = drive_values->BytesPerSec;
  65   1        // shift right by one bit position until we've moved it all the way out
  66   1        while(temp16 != 0x01)
  67   1        {
  68   2           drive_values->BytesPerSecShift++;
  69   2           temp16 = temp16>>1;
  70   2        }
  71   1      
  72   1        drive_values->SecPerClus  = read8(BPB_SectorsPerCluster_offset, data_array);
  73   1      
  74   1        RsvdSecCnt  = read16(BPB_RsvdSectorCount_offset, data_array);
  75   1        NumFAT      = read8(BPB_NumberFATs_offset, data_array);
  76   1        RootEntCnt  = read16(BPB_RootEntryCount_offset, data_array);
  77   1        FATSz16     = read16(BPB_FATSz16_offset, data_array);
  78   1        FATSz32     = read32(BPB_FATSz32_offset, data_array);
  79   1        RootClus    = read32(BPB_RootClus_offset, data_array);
  80   1      
  81   1      
  82   1        if(FATSz16 != 0)
  83   1        {
  84   2          FATSz = read16(BPB_FATSz16_offset, data_array);
  85   2        }
  86   1        else
  87   1        {
  88   2          FATSz = read32(BPB_FATSz32_offset, data_array);
  89   2        }
  90   1      
  91   1        if(FATSz32 != 0)
  92   1        {
  93   2          TotSec = read16(BPB_TotSec16_offset, data_array);
  94   2        }
  95   1        else
  96   1        {
  97   2          TotSec = read32(BPB_TotSec32_offset, data_array);
  98   2        }
  99   1      
 100   1        // Determine how many sectors are in the root directory
 101   1        drive_values->RootDirSecs = ((RootEntCnt * 32) + (drive_values->BytesPerSec -1 )) / (drive_values->Bytes
             -PerSec);
 102   1      
 103   1        // Determine how many sectors are data sectors
 104   1        DataSec = TotSec - (RsvdSecCnt + (NumFAT * FATSz) + drive_values->RootDirSecs);
 105   1      
 106   1        // Determine first sector of FAT
 107   1        drive_values->StartofFAT = RsvdSecCnt + MBR_RelSec;
 108   1      
 109   1        // Determine the first sector of the data area
 110   1        drive_values->FirstDataSec = drive_values->StartofFAT + (NumFAT*FATSz) + drive_values->RootDirSecs;
 111   1      
 112   1        // Determine count of clusters and FAT type
 113   1        ClusterCount = DataSec / drive_values->BytesPerSec;
 114   1        if(ClusterCount < 4085)
 115   1        {
C51 COMPILER V6.02  FILE_SYSTEM                                                            11/08/2019 17:19:47 PAGE 3   

 116   2          // FAT12
 117   2          printf("error: FAT12 unsupported\n");
 118   2          return MOUNT_FAIL;
 119   2        }
 120   1        else if(ClusterCount < 65525)
 121   1        {
 122   2          // FAT16
 123   2          drive_values->FATtype = FAT16;
 124   2          printf("FAT16 detected\n");
 125   2          drive_values->FirstRootDirSec = RsvdSecCnt + (NumFAT * FATSz16);
 126   2        }
 127   1        else
 128   1        {
 129   2          // FAT32
 130   2          drive_values->FATtype = FAT32;
 131   2          printf("FAT32 detected\n");
 132   2          drive_values->FirstRootDirSec = ((RootClus-2)*drive_values->SecPerClus) + drive_values->FirstDataSec;
 133   2        }
 134   1      
 135   1        return MOUNT_SUCCESS;
 136   1      }
 137          
 138          uint32_t first_sector(uint32_t cluster_num)
 139          {
 140   1        FS_values_t *drive_values = Export_Drive_values();
 141   1      
 142   1        // Calculate starting sector of cluster
 143   1        if(cluster_num == 0)
 144   1        {
 145   2          return drive_values->FirstRootDirSec;
 146   2        }
 147   1        else
 148   1        {
 149   2          return ((cluster_num - 2)*drive_values->SecPerClus) + drive_values->FirstDataSec;
 150   2        }
 151   1      }
 152          
 153          uint32_t find_next_clus(uint32_t cluster_num, uint8_t xdata *xram_data_array)
 154          {
 155   1        uint8_t *data_array;
 156   1        uint16_t FAToffset;
 157   1        uint32_t sector, next_clus;
 158   1        FS_values_t *drive_values = Export_Drive_values();
 159   1      
 160   1        data_array = xram_data_array; // cast xdata to uint8_t since all other functions don't use xdata
 161   1      
 162   1        // FATtype will be either 2 (FAT16) or 4 (FAT32)
 163   1        sector = ((cluster_num*drive_values->FATtype)/drive_values->BytesPerSec) + drive_values->StartofFAT;
 164   1        Read_Sector(sector, drive_values->BytesPerSec, data_array);
 165   1      
 166   1        // Determine the offset of the cluster within this sector
 167   1        FAToffset = (uint16_t)((cluster_num*drive_values->FATtype)%(drive_values->BytesPerSec));
 168   1      
 169   1        // Read the cluster entry from the FAT sector
 170   1        if(drive_values->FATtype == FAT32)
 171   1        {
 172   2          return (read32(FAToffset, data_array)&0x0FFFFFFF);
 173   2        }
 174   1        else if(drive_values->FATtype == FAT16)
 175   1        {
 176   2          next_clus = (uint32_t)(read16(FAToffset, data_array)&0xFFFF);
 177   2      
C51 COMPILER V6.02  FILE_SYSTEM                                                            11/08/2019 17:19:47 PAGE 4   

 178   2          // modify EOF to match for FAT32
 179   2          if(next_clus == 0xFFFF)
 180   2          {
 181   3            return 0x0FFFFFFF;
 182   3          }
 183   2          else
 184   2          {
 185   3            return next_clus;
 186   3          }
 187   2        }
 188   1        else
 189   1        {
 190   2          printf("Error: FAT type unsupported\n");
 191   2          return 0;
 192   2        }
 193   1      
 194   1        printf("Error: couldn't find next cluster\n");
 195   1        return 0;
 196   1      }
 197          
 198          
 199          void print_file(uint32_t cluster_num, uint8_t xdata *xram_data_array)
 200          {
 201   1         uint32_t base_sector, sector_offset;
 202   1         uint8_t temp8;
 203   1         uint8_t *data_array;
 204   1         FS_values_t *drive_values = Export_Drive_values();
 205   1         data_array = xram_data_array; // cast xdata to uint8_t since all other functions don't use xdata
 206   1      
 207   1         sector_offset = 0; // start at first sector
 208   1      
 209   1         printf(" **** Opening File ****\n");
 210   1         printf("Press 'e' to exit\n");
 211   1      
 212   1         do
 213   1         {
 214   2            // check if we need to find the first sector of the cluster
 215   2            if(sector_offset == 0) base_sector = first_sector(cluster_num);
 216   2      
 217   2            // read the sector in
 218   2            Read_Sector((base_sector+sector_offset), drive_values->BytesPerSec, data_array);
 219   2      
 220   2      
 221   2            printf(" **** cluster: %lu   sector: %lu ****\n", cluster_num, base_sector+sector_offset);
 222   2            print_memory(data_array, drive_values->BytesPerSec);
 223   2      
 224   2            sector_offset++; // go forward one sector
 225   2      
 226   2            // check if we need to go to the next cluster
 227   2            if(sector_offset == drive_values->BytesPerSec)
 228   2            {
 229   3              cluster_num = find_next_clus(cluster_num, data_array);
 230   3              sector_offset = 0;
 231   3            }
 232   2      
 233   2            // wait for user to choose an action
 234   2            do
 235   2            {
 236   3              temp8 = getchar();
 237   3            }while((temp8!='e') && (temp8!='n'));
 238   2      
 239   2         }while(temp8 == 'e');
C51 COMPILER V6.02  FILE_SYSTEM                                                            11/08/2019 17:19:47 PAGE 5   

 240   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1818    ----
   CONSTANT SIZE    =    264    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      88
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
